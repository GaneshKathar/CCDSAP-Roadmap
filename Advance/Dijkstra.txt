#include <bits/stdc++.h>
using namespace std;

int n, m;

map<pair<int, int>, int> mp;

vector<int> adj[10001];

const int INF = INT_MAX;

int dist[10001] = {INF};

bool visited[10001] = {false};

inline void addEdge(int u, int v, int w){
    
    adj[u].push_back(v);
    adj[v].push_back(u);
    
    if(mp.find(make_pair(u, v)) == mp.end()){
        mp[make_pair(u, v)] = w;
        mp[make_pair(v, u)] = w;
    }else{
        mp[make_pair(u, v)] = min(mp[make_pair(u, v)], w);
        mp[make_pair(v, u)] = min(mp[make_pair(v, u)], w);
    }
    
}

typedef struct node{
    
    int u;
    int d;
    
    bool operator < (const node& n)const{
        
        if(n.d < d){
            return true;
        }    
        return false;
    }
    
}node;

priority_queue<node> que;

inline void dijkstra(int source){
    
    for(int i=0;i<n+1;i++){
        dist[i] = INF;
        visited[i] = false;
    }
    
    node p;
    p.u = source;
    p.d = 0;
    dist[source] = 0;
    que.push(p);    
    
    
    while(!que.empty()){
        
        node popedNode = que.top();
        que.pop();
        
        if(visited[popedNode.u]){
            continue;
        }
        
        visited[popedNode.u] = true;
        
        for(int i=0;i<adj[popedNode.u].size();i++){
            
            if(!visited[adj[popedNode.u][i]]){
                
                node newNode;
                newNode.u = adj[popedNode.u][i];
                
                int edgeW = mp[make_pair(newNode.u, popedNode.u)];
                if(dist[newNode.u] > popedNode.d + edgeW){
                    newNode.d = popedNode.d + edgeW;
                    dist[newNode.u] = newNode.d;
                    que.push(newNode);
                }
            }
        }
    }
}


int main(){
    
    int t;
    scanf("%d", &t);

    while(t--){
        
        scanf("%d %d", &n, &m);
        
        int u, v, w;
        for(int i=0;i<m;i++){
            scanf("%d %d %d", &u, &v, &w);
            addEdge(u,v,w);
        }

        int source;
        scanf("%d", &source);

        dijkstra(source);
        
        for(int i=1;i<=n;i++){
            
            if(i!=source)
                printf("%d ", (dist[i]==INF)?(-1):dist[i]);   
        }
        cout<<endl;

        //Resetting:
        mp.clear();
        while(!que.empty()){
            que.pop();
        }

        for(int i=0;i<n+1;i++){
            adj[i].clear();
        }
    }


    return 0;
}