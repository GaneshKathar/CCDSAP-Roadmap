//KMP
// Check GFG for best implementaion

#include <bits/stdc++.h>
using namespace std;

int lps[1000001]; //LPS stands for longest proper prefix which is also a suffix

int CNT = 0; //Store the count of matches

inline void computeLPS(string pat){
    
    int M = pat.length();
    int len = 0;
    
    int i = 1;
    lps[0] = 0;
    
    while(i<M){
        
        if(pat[len] == pat[i]){
            len++;
            lps[i] = len;
            i++;
        }else{
            
            if(len != 0){
                
                len = lps[len-1];
            }else{
                
                lps[i] = 0;
                i++;
            }
        }
    }
}

inline void search(string pat, string s){
    
    int N = s.length();
    int M = pat.length();
    
    int i = 0;
    int j = 0;
    
    while(i<N){
        
        if(s[i] == pat[j]){
            i++;
            j++;
        }
        
        if(j==M){
            CNT++;
            j = lps[j-1];
        }
        
        else if(s[i] != pat[j]){
            
            if(j!=0){
                j = lps[j-1];
            }else{
                i++;
            }
        }
    }
}

int main(){
    
    string pat, s;
    cin>>pat>>s;
    
    computeLPS(pat);
    
    search(pat, s);
    
    cout<<CNT<<endl;
    
    return 0;    
}




